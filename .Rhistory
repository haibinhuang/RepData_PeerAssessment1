qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
?stats_smooth
?lattice
?lpoints
library(lattice)
?lpoints
library(httr)
library(jsonlite)
oauth_endpoints("github")
myapp <- oauth_app("github", "9e457fedbccf51efc69b",
"a0b567b629c6f2e6735a3d5d0289a7753e183ee9")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- GET("https://api.github.com/users/jtleek/repos", config(token = github_token))
stop_for_status(req)
json1 = content(req)
json2 = jsonlite::fromJSON(toJSON(json1))
q()
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10, "var3"=sample(11:15)))
X <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
x
X
x[,var2]
X[,var2]
X[,"var2"]
getwd()
## download and unzip data file
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
download.file(fileUrl, destfile = "./exdata_data_NEI_data.zip")
unzip("./exdata_data_NEI_data.zip")
## read in emission data
NEI <- readRDS("summarySCC_PM25.rds")
## question 1
## get sum of emissions by year
yearlyemission <- sapply(split(NEI$Emissions, NEI$year), sum)
## transform into data frame
df <- as.matrix(yearlyemission)
## generating plot1 in png format
png(file = "plot1.png", bg = "transparent")
barplot(df[,1], names.arg = rownames(df), xlab="Year",
ylab="Total emissions (tons)", col = "black")
dev.off()
png(file = "plot1.png", bg = "transparent")
barplot(df[,1], names.arg = rownames(df), xlab="Year",
ylab="Total PM2.5 emissions (tons)", col = "black")
dev.off()
## download and unzip data file
fileUrl <- "https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip"
download.file(fileUrl, destfile = "./exdata_data_NEI_data.zip")
unzip("./exdata_data_NEI_data.zip")
## read in emission data
NEI <- readRDS("summarySCC_PM25.rds")
## question 2
## get baltimore emission data by subsetting NEI
NEIBaltimore <- subset(NEI, NEI$fips == "24510")
## get sum of emissions by year
BaltimoreYearlyEmission <- sapply(split(NEIBaltimore$Emissions,
NEIBaltimore$year), sum)
## transform into data frame
df <- as.matrix(BaltimoreYearlyEmission)
## generating plot2 in png format
png(file = "plot2.png", bg = "transparent")
barplot(df[,1], names.arg = rownames(df), xlab="Year",
ylab="PM2.5 emission (tons)", col = "black")
dev.off()
png(file = "plot2.png", bg = "transparent")
barplot(df[,1], names.arg = rownames(df), xlab="Year",
ylab="Baltimore city PM2.5 emission (tons)", col = "black")
dev.off()
library(ggplot2)
library(reshape2)
## question 3
## get baltimore data by subsetting NEI based on fips
NEIBaltimore <- subset(NEI, NEI$fips == "24510")
## select year, type and emissions data
NEIBaltimoresubset <- subset(NEIBaltimore, select = c("Emissions", "type", "year"))
## melt above data frame by year and type
melteddf <- melt(NEIBaltimoresubset, id.vars = c("year", "type"))
## dcast melted data frame and get aggregated sum
df <- dcast(melteddf, year + type ~ variable, fun.aggregate = sum)
## generating plot3 in png format
png(file = "plot3.png", bg = "transparent")
g <- ggplot(df, aes(x = year, y = Emissions, colour = type))
g + geom_line(size=1) +
xlab("Year") +
ylab("Baltimore city Emissions by type (tons)") +
geom_point(size=4) +
scale_x_continuous(breaks = df$year, labels = df$year)
dev.off()
png(file = "plot3.png", bg = "transparent")
g <- ggplot(df, aes(x = year, y = Emissions, colour = type))
g + geom_line(size=1) +
xlab("Year") +
ylab("Baltimore city PM2.5 emissions by type (tons)") +
geom_point(size=4) +
scale_x_continuous(breaks = df$year, labels = df$year)
dev.off()
## get Baltimore emission by fips
NEIBaltimore <- subset(NEI, NEI$fips == "24510")
## get Baltimore Motor vehicle emission by type "ON-ROAD"
NEIBaltimoreMotor <- subset(NEIBaltimore, NEIBaltimore$type == "ON-ROAD")
## select emissions and year data
NEIBaltimoreMotorSub <- subset(NEIBaltimoreMotor, select = c("Emissions", "year"))
## melt above data frame by year
melteddf <- melt(NEIBaltimoreMotorSub, id.vars = "year")
## dcast melted data frame and get aggregated sum
df <- dcast(melteddf, year ~ variable, fun.aggregate = sum)
## generating plot5 in png format
png(file = "plot5.png", bg = "transparent")
barplot(df$Emissions, names.arg = df$year, xlab="Year",
ylab="Baltimore city motor vehicle PM2.5 emissions (tons)", col = "black")
dev.off()
## read in classification code
SCC <- readRDS("Source_Classification_Code.rds")
## get index for SCC short name containing "Comb" (combustion)
i <- grep("Comb", SCC$Short.Name)
## get index for SCC short name containing "Coal"
j <- grep("Coal", SCC$Short.Name)
## get index for scc short name containing both "Comb" and "Coal"
k <- intersect(i,j)
## subsetting SCC based on above index
CoalComb <- SCC[k,]
## get SCC classification code related to coal combustion
CoalCombSCC <- CoalComb$SCC
## subsetting emission data by SCC code related to coal combustion
CoalCombNEI <- subset(NEI, NEI$SCC %in% CoalCombSCC)
## select emission and year
CoalCombNEISub <- subset(CoalCombNEI, select = c("Emissions", "year"))
## melt above data frame by year
melteddf <- melt(CoalCombNEISub, id.vars = "year")
## dcast melted data frame and get aggregated sum
df <- dcast(melteddf, year ~ variable, fun.aggregate = sum)
## generating plot4 in png format
png(file = "plot4.png", bg = "transparent")
barplot(df$Emissions, names.arg = df$year, xlab="Year",
ylab="Coal Combustion related PM2.5 emission (tons)", col = "black")
dev.off()
## generating plot4 in png format
png(file = "plot4.png", bg = "transparent")
barplot(df$Emissions, names.arg = df$year, xlab="Year",
ylab="Coal Combustion related PM2.5 emissions (tons)", col = "black")
dev.off()
## get Baltimore and Los Angeles data by fips
NEIBalLos <- subset(NEI, NEI$fips == "24510" | NEI$fips == "06037")
## get motor vehicle emission data by type "ON-ROAD"
NEIBalLosMotor <- subset(NEIBalLos, NEIBalLos$type == "ON-ROAD")
## select fips, emissions and year data
NEIBalLosMotorSub <- subset(NEIBalLosMotor, select = c("fips", "Emissions", "year"))
## melt above data frame by year and fips
melteddf <- melt(NEIBalLosMotorSub, id.vars = c("year", "fips"))
## dcast melted data frame and get aggregated sum
df <- dcast(melteddf, year + fips ~ variable, fun.aggregate = sum)
## subtract baseline of emission (year 1999 emission)
df$Emissions[df$fips == "24510"] <- df$Emissions[df$fips == "24510"] -
df$Emissions[df$fips == "24510"][1]
df$Emissions[df$fips == "06037"] <- df$Emissions[df$fips == "06037"] -
df$Emissions[df$fips == "06037"][1]
## change fips code to city or county name
df$fips[df$fips == "24510"] <- "Baltimore City"
df$fips[df$fips == "06037"] <- "Los Angeles County"
## change fips to Location
colnames(df)[2] <- "Location"
## generating plot6 in png format
png(file = "plot6.png", bg = "transparent")
g <- ggplot(df, aes(x = year, y = Emissions, colour = Location))
g + geom_line(size=1) +
xlab("Year") +
ylab("Motor Vehicle Emissions changes (compared with year 1999) (tons)") +
geom_point(size=4) +
scale_x_continuous(breaks = df$year, labels = df$year)
dev.off()
## load reshap2
library(reshape2)
## download and unzip file
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileUrl, destfile="./getdata_projectfiles_UCI HAR Dataset.zip",
mode = "wb")
unzip("./getdata_projectfiles_UCI HAR Dataset.zip")
## read in features
features <- read.table("./UCI HAR Dataset/features.txt")[,2]
## remove () in features
features <- gsub("\\(\\)", "", features)
## change "-" to "." in features
features <- gsub("-", ".", features)
## change "," to "." in features
features <- gsub(",", ".", features)
## read in test data set related subject
testsubject <- read.table("./UCI HAR Dataset/test/subject_test.txt",
col.names = "subject")
## read in test data set realted activity
testactivity <- read.table("./UCI HAR Dataset/test/y_test.txt",
col.names = "activity")
## read in test data set, set col names based on features
testset <- read.table("./UCI HAR Dataset/test/X_test.txt",
col.names = features)
## combine subject, activity and test data set
testset <- cbind(testsubject, testactivity, testset)
## read in train data set related subject
trainsubject <- read.table("./UCI HAR Dataset/train/subject_train.txt",
col.names = "subject")
## read in train data set realted activity
trainactivity <- read.table("./UCI HAR Dataset/train/y_train.txt",
col.names = "activity")
## read in train data set, , set col names based on features
trainset <- read.table("./UCI HAR Dataset/train/X_train.txt",
col.names = features)
## combine subject, activity and test data set
trainset <- cbind(trainsubject, trainactivity, trainset)
## merge test data set and train data set
allset <- merge(testset, trainset, all=TRUE)
## subset all data set to include only columns for means and stds
## get index for columns with mean and std values
i <- grep("mean|std", colnames(allset))
## subsetting allset for columns of means and stds plus subject and activity
meanandstd <- allset[, c(1,2,i)]
## remove those columns containing meanFreq since they don't have
## corresponding std values
## get index for columns containing meanFreq
j <- grep("meanFreq", colnames(meanandstd))
## remove those columns with with meanFreq
meanandstd <- meanandstd[, -j]
## change column names to lower case
colnames(meanandstd) <- tolower(colnames(meanandstd))
## melt meanandstd according to subject and activity
meltedmeanandstd <- melt(meanandstd, id.vars = c("subject", "activity"))
## dcast melted meanandstd and calculate aggregated mean
meanandstdtidy <- dcast(meltedmeanandstd, subject + activity ~ variable,
fun.aggregate = mean)
## change activity code to actual activity
meanandstdtidy$activity[meanandstdtidy$activity == "1"] <- "walking"
meanandstdtidy$activity[meanandstdtidy$activity == "2"] <- "walking.upstairs"
meanandstdtidy$activity[meanandstdtidy$activity == "3"] <- "walking.downstairs"
meanandstdtidy$activity[meanandstdtidy$activity == "4"] <- "sitting"
meanandstdtidy$activity[meanandstdtidy$activity == "5"] <- "standing"
meanandstdtidy$activity[meanandstdtidy$activity == "6"] <- "laying"
## write the tidy data frame to file
write.table(meanandstdtidy, file = "./humanactivitybysmartphone.txt")
k <- grep("std", colnames(allset))
meanandstdtidy$activity
## read in features
features <- read.table("./UCI HAR Dataset/features.txt")[,2]
## remove () in features
features <- gsub("\\(\\)", "", features)
## change "-" to "." in features
features <- gsub("-", ".", features)
## change "," to "." in features
features <- gsub(",", ".", features)
## read in test data set related subject
testsubject <- read.table("./UCI HAR Dataset/test/subject_test.txt",
col.names = "subject")
## read in test data set realted activity
testactivity <- read.table("./UCI HAR Dataset/test/y_test.txt",
col.names = "activity")
## read in test data set, set col names based on features
testset <- read.table("./UCI HAR Dataset/test/X_test.txt",
col.names = features)
## combine subject, activity and test data set
testset <- cbind(testsubject, testactivity, testset)
## read in train data set related subject
trainsubject <- read.table("./UCI HAR Dataset/train/subject_train.txt",
col.names = "subject")
## read in train data set realted activity
trainactivity <- read.table("./UCI HAR Dataset/train/y_train.txt",
col.names = "activity")
## read in train data set, , set col names based on features
trainset <- read.table("./UCI HAR Dataset/train/X_train.txt",
col.names = features)
## combine subject, activity and test data set
trainset <- cbind(trainsubject, trainactivity, trainset)
## merge test data set and train data set
allset <- merge(testset, trainset, all=TRUE)
i <- grep("mean", colnames(allset))
j <- grep("std", colnames(allset))
k <- grep("meanFreq", colnames(allset))
l <- i+j-k
unique(i, j)
m <- unique(i, j)
?unique
l <- c(i,j, -k)
l <- c(i, j)
l
setdiff(l, k)
m <- setdiff(l, k)
?setdiff
l <- union(i,j)
l
l <- c(i,j)
l
features <- read.table("./UCI HAR Dataset/features.txt")[,2]
features <- gsub("\\(\\)", "", features)
## change "-" to "." in features
features <- gsub("-", ".", features)
## change "," to "." in features
features <- gsub(",", ".", features)
?aggregate
## read in emission data
NEI <- readRDS("summarySCC_PM25.rds")
## question 2
## get baltimore emission data by subsetting NEI
NEIBaltimore <- subset(NEI, NEI$fips == "24510")
MD <- NEIBaltimore
barplot(tapply(X=MD$Emissions, INDEX=MD$year, FUN=sum),
main='Total Emission in Baltimore City, MD', xlab='Year', ylab=expression('PM'[2.5]))
?grepl
Data <- aggregate(NEI$Emissions, list(NEI$year), sum)
names(Data) <- c("year", "Emissions")
Data
plot(Data, type='l', main="Total Emissions in The US from 1999 to 2008")
yeartotal = tapply(NEI$Emissions,pmdata$year,sum)
yeartotal = tapply(NEI$Emissions,NEI$year,sum)
yeartotal
barplot(yeartotal/10^6,main=expression("Total " * PM[2.5] *" over Years"),xlab="Year",ylab=expression("Total " * PM[2.5]*" /(Mton)"),col="Blue")
?graphics.off
?strsplit
df <- read.csv("getdata_data_ss06hid.csv")
dfnames <- names(df)
strsplit(dfnames, "wgtp")
df <- read.csv("getdata_data_GDP.csv")
df
str(df)
colnames(df)
head(df)
head(df, n-10)
head(df, n=10)
df
head(df, n=10)
df[,2]
dfsub <- df[(5:194), c(1,2,4,5)]
str(dfsub)
df
dfsub
colnames(dfsub) <- c("countrycode", "rankings", "country", "gdp")
dfsub
gsub(",", "", dfsub$gdp)
dfsub
dfsub$gdp <- gsub(",", "", dfsub$gdp)
dfsub
rownames(dfsub) <- NULL
dfsub
mean(dfsub$gdp)
mean(as.numeric(dfsub$gdp)
)
grep("^United",country)
grep("^United",dfsub$country)
?weekdays
setwd("../RepData_Peerassessment1")
unzip("activity.zip")
DF <- read.csv("activity.csv", na.strings = "NA",
colClasses = c("numeric", "Date", "numeric"))
DF$weekdays <- weekdays(DF$date)
head(DF)
DF
library(reshape2)
library(xtable)
setwd("../RepData_Peerassessment1")
unzip("activity.zip")
DF <- read.csv("activity.csv", na.strings = "NA",
colClasses = c("numeric", "Date", "numeric"))
DFComplete <- DF[complete.cases(DF),]
MeltedDFDateSteps <- melt(DFComplete[, 1:2], id.vars = "date")
DFDateSteps <- dcast(MeltedDFDateSteps, date ~ variable, fun.aggregate = sum)
hist(DFDateSteps$steps, breaks = 100, xlab ="Total numbers of steps taken
each day (missing values removed)", main = NULL)
StepsMean <- mean(DFDateSteps$steps)
StepsMedian <- median(DFDateSteps$steps)
DFMeanMedian <- matrix(c(StepsMean, StepsMedian), nrow = 2, byrow = TRUE,
dimnames = list(c("mean", "median"),
c("steps.taken.per.day.na.removed")))
xt <- xtable(DFMeanMedian)
print(xt, type = "html")
MeltedDFIntervalSteps <- melt(DFComplete[, c(1,3)], id.vars = "interval")
DFIntervalSteps <- dcast(MeltedDFIntervalSteps, interval ~ variable,
fun.aggregate = mean)
plot(DFIntervalSteps$interval, DFIntervalSteps$steps, type="l", xlab="Interval",
ylab="Average number of steps")
```{r Interval containng maximum number of steps, results='asis'}
MaxSteps <- subset(DFIntervalSteps, DFIntervalSteps$steps ==
max(DFIntervalSteps$steps))
IntervalMaxSteps <- MaxSteps[1,1]
MaximumMaxSteps <- MaxSteps[1,2]
DFNAsFilled <- DF
DFNAsFilled[is.na(DFNAsFilled$steps),]$steps <-
DFIntervalSteps$steps[match(DFNAsFilled[is.na(DF$steps),]$interval,
DFIntervalSteps$interval)]
MeltedDFNAsFilledDateSteps <- melt(DFNAsFilled[, 1:2], id.vars = "date")
DFNAsFilledDateSteps <- dcast(MeltedDFNAsFilledDateSteps, date ~ variable,
fun.aggregate = sum)
hist(DFNAsFilledDateSteps$steps, breaks = 100, xlab ="Total numbers of steps
taken each day (missing values filled)", main = NULL)
StepsMeanNAsFilled <- mean(DFNAsFilledDateSteps$steps)
StepsMedianNAsFilled <- median(DFNAsFilledDateSteps$steps)
DFMeanMedianNAsFilled <- matrix(c(StepsMeanNAsFilled, StepsMedianNAsFilled),
nrow = 2, byrow = TRUE, dimnames =
list(c("mean", "median"), c("steps.taken.per.day.na.filled")))
xtNAsFilled <- xtable(DFMeanMedianNAsFilled)
print(xtNAsFilled, type = "html")
DFMeanMedianCombined <- cbind(DFMeanMedian, DFMeanMedianNAsFilled)
xtCombined <- xtable(DFMeanMedianCombined)
print(xtCombined, type = "html")
DFNAsFilled$weekdays <- weekdays(DFNAsFilled$date)
if (c("Monday","Tuesday","Wednesday","Thursday","Friday")
%in% DFNAsFilled$weekdays) {
DFNAsFilled$weekdays <- "weekday"
}
else {
DFNAsFilled$weekdays <- "weekend"
}
a <- c("Monday","Tuesday","Wednesday","Thursday","Friday")
%in% DFNAsFilled$weekdays)
a <- c("Monday","Tuesday","Wednesday","Thursday","Friday") %in% DFNAsFilled$weekdays
a
if (DFNAsFilled$weekdays=="Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday") {
DFNAsFilled$weekdays <- "weekday"
}
else {
DFNAsFilled$weekdays <- "weekend"
}
if (DFNAsFilled$weekdays=="Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday") {
DFNAsFilled$weekdays <- "weekday"
}
else {
DFNAsFilled$weekdays <- "weekend"
}
if (as.character(DFNAsFilled$weekdays)=="Monday"|"Tuesday"|"Wednesday"|"Thursday"|"Friday") {
DFNAsFilled$weekdays <- "weekday"
}
else {
DFNAsFilled$weekdays <- "weekend"
}
DFNAsFilled$weekdays <- gsub("Monday|Tuesday|Wednesday|Thursday|Friday", "weekday", DFNAsFilled$weekdays)
DFNAsFilled$weekdays <- gsub("Saturday|Sunday", "weekend", DFNAsFilled$weekdays)
head(DFNAsFilled)
DFNAsFilled
tail(DFNAsFilled)
str(DFNAsFilled)
DFNAsFilled$weekdays
DF <- read.csv("activity.csv", na.strings = "NA",
colClasses = c("numeric", "Date", "numeric"))
DFNAsFilled <- DF
DFNAsFilled[is.na(DFNAsFilled$steps),]$steps <-
DFIntervalSteps$steps[match(DFNAsFilled[is.na(DF$steps),]$interval,
DFIntervalSteps$interval)]
DFNAsFilled$weekdays <- weekdays(DFNAsFilled$date)
DFNAsFilled$weekdays <- gsub("Monday|Tuesday|Wednesday|Thursday|Friday", "weekday", DFNAsFilled$weekdays)
DFNAsFilled$weekdays <- gsub("Saturday|Sunday", "weekend", DFNAsFilled$weekdays)
DFNAsFilled$weekdays
head(DFNAsFilled)
MeltedDFNAsFilled <- melt(DFNAsFilled[, c(1,3,4],
id.vars = "weekdays" + "interval")
DFNAsFilledDcast <- dcast(MeltedDFNAsFilled, weekdays + interval ~ variable,
fun.aggregate = mean)
MeltedDFNAsFilled <- melt(DFNAsFilled[, c(1,3,4)],
id.vars = "weekdays" + "interval")
DFNAsFilledDcast <- dcast(MeltedDFNAsFilled, weekdays + interval ~ variable,
fun.aggregate = mean)
MeltedDFNAsFilled <- melt(DFNAsFilled[, c(1,3,4)],
id.vars = c("weekdays","interval")
DFNAsFilledDcast <- dcast(MeltedDFNAsFilled, weekdays + interval ~ variable,
fun.aggregate = mean)
MeltedDFNAsFilled <- melt(DFNAsFilled[, c(1,3,4)],
id.vars = c("weekdays","interval"))
DFNAsFilledDcast <- dcast(MeltedDFNAsFilled, weekdays + interval ~ variable,
fun.aggregate = mean)
DFNAsFilledDcast
head(DFNAsFilledDcast)
qplot(interval, steps, data=DFWeekdays, facets=.~weekdays)
library(ggplot2)
qplot(interval, steps, data=DFWeekdays, facets=.~weekdays)
DFWeekdays <- dcast(MeltedDFNAsFilled, weekdays + interval ~ variable,
fun.aggregate = mean)
qplot(interval, steps, data=DFWeekdays, facets=.~weekdays)
?qplot
qplot(interval, steps, data=DFWeekdays, facets=weekdays~.)
qplot(interval, steps, data=DFWeekdays, facets=weekdays~., geom="line")
g <- ggplot(DFWeekdays, aes(x = interval, y = steps))
g + geom_line(size=2) +
facet_wrap(weekdays ~ ., nrow = 2, ncol = 1) +
xlab("Interval") +
ylab("Number of steps")
g <- ggplot(DFWeekdays, aes(x = interval, y = steps))
g + facet_wrap(weekdays ~ ., nrow = 2, ncol = 1) +
geom_line(size=2) +
xlab("Interval") +
ylab("Number of steps")
g <- ggplot(DFWeekdays, aes(x = interval, y = steps))
g + facet_grid(weekdays ~ ., nrow = 2, ncol = 1) +
geom_line(size=2) +
xlab("Interval") +
ylab("Number of steps")
g <- ggplot(DFWeekdays, aes(x = interval, y = steps))
g + facet_grid(weekdays ~ .) +
geom_line(size=2) +
xlab("Interval") +
ylab("Number of steps")
g <- ggplot(DFWeekdays, aes(x = interval, y = steps))
g + facet_grid(weekdays ~ .) +
geom_line(size=1, col="blue") +
xlab("Interval") +
ylab("Number of steps")
DFNAsFilledCast$interval
DFNAsFilled$interval
setwd("~/../RepData_Peerassessment1")
getwd()
setwd(c:/Users/lx)
setwd("C:/Users/lx")
getwd()
setwd("~")
getwd()
getwd()
getwd()
setwd("~/../RepData_Peerassessment1")
getwd()
